<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MSPro.CLArgs</name>
    </assembly>
    <members>
        <member name="T:MSPro.CLArgs.ArgumentConverter`1">
            <summary>
                Turns Arguments into a parameter object of a specified type..
            </summary>
        </member>
        <member name="F:MSPro.CLArgs.ArgumentConverter`1._allOptions">
            <summary>
                Get a list of Options unique by their name.
            </summary>
        </member>
        <member name="M:MSPro.CLArgs.ArgumentConverter`1.TryConvert(MSPro.CLArgs.CommandLineArguments,System.Collections.Generic.IEnumerable{MSPro.CLArgs.OptionDescriptorAttribute},`0@,System.Collections.Generic.HashSet{System.String}@)">
            <summary>
                Execute the command that is resolved by the verbs passed in the command-line.
            </summary>
        </member>
        <member name="M:MSPro.CLArgs.ArgumentConverter`1.resolvePropertyValue(System.Type,System.Collections.Generic.IReadOnlyCollection{MSPro.CLArgs.Option},System.Collections.Generic.ISet{System.String})">
            <summary>
                Resolves a single property's value. If property is an annotated class it will
                recursively resolve all properties of this class.
            </summary>
            <param name="executionContextType"></param>
            <param name="options"></param>
            <param name="unresolvedPropertyNames"></param>
        </member>
        <member name="T:MSPro.CLArgs.Commander">
            <summary>
                The top level class to easily use 'CLArgs'.
            </summary>
        </member>
        <member name="M:MSPro.CLArgs.Commander.#ctor(MSPro.CLArgs.Settings)">
            <summary>
                Create a new Commander instance.
            </summary>
            <param name="settings">Settings used to control CLArgs overall behaviour.</param>
        </member>
        <member name="P:MSPro.CLArgs.Commander.CommandDescriptors">
            <summary>
            Get a list of available CommandDescriptors.
            </summary>
        </member>
        <member name="M:MSPro.CLArgs.Commander.RegisterCommandFactory(System.String,System.Func{MSPro.CLArgs.ICommand},System.String)">
            <summary>
                Manually register (add or update) a Command.
            </summary>
            <remarks>
                Not the command itself is registered but <b>a factory function</b> that
                is used to create a new instance of the Command.<br />
                If there is already a command registered for the same <paramref name="verb" />
                the 'old' command is overridden.
            </remarks>
            <param name="verb">The <see cref="P:MSPro.CLArgs.CommandLineArguments.Verbs" /> that is linked to this Command</param>
            <param name="factoryFunc">A factory function that return an instance of <see cref="T:MSPro.CLArgs.ICommand" />.</param>
            <param name="commandDescription"></param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="verb" /> is null or empty.</exception>
            <example>
                <code>
                Commander c = new Commander(args);
                c.RegisterCommandFactory( "HelloWorld", () => new HelloWorldCommand());
                c.ExecuteCommand();
            </code>
            </example>
            <seealso cref="P:MSPro.CLArgs.Settings.AutoResolveCommands" />
        </member>
        <member name="M:MSPro.CLArgs.Commander.RegisterCommand(MSPro.CLArgs.CommandDescriptor)">
            <summary>
            Register a command.
            </summary>
            <param name="commandDescriptor"></param>
        </member>
        <member name="M:MSPro.CLArgs.Commander.RegisterFunction(System.String,System.Action{MSPro.CLArgs.CommandLineArguments},System.String)">
            <summary>
                Directly bind a function to a verb.
            </summary>
            <param name="verb">The Verb</param>
            <param name="func">
                The function that is executed when the verbs passed in the
                command-line (<see cref="P:MSPro.CLArgs.CommandLineArguments.VerbPath" /> are equal to the <paramref name="verb" />.
            </param>
            <param name="commandDescription"></param>
            <example>
                <code>
            string COMMAND_LINE = "word1 text2 verb3";
            // Arguments.VerbPath is executed
            var commander = new Commander(new Settings { AutoResolveCommands = false });
            commander.RegisterFunction("word1", word);
            commander.RegisterFunction("word1.text2", text);
            commander.RegisterFunction("word1.text2.verb3", verb);
            commander.ExecuteCommand(args);
            </code>
            </example>
            <exception cref="T:System.ArgumentNullException">In case <paramref name="verb" /> is null.</exception>
            <seealso cref="P:MSPro.CLArgs.CommandLineArguments.VerbPath" />
            <seealso cref="P:MSPro.CLArgs.Settings.AutoResolveCommands" />
        </member>
        <member name="M:MSPro.CLArgs.Commander.ResolveCommand(System.String)">
            <summary>
                Resolve a Command implementation by Verb.
            </summary>
            <seealso cref="P:MSPro.CLArgs.Settings.AutoResolveCommands" />
            <seealso cref="M:MSPro.CLArgs.Commander.RegisterCommandFactory(System.String,System.Func{MSPro.CLArgs.ICommand},System.String)" />
            <param name="verb">
                The verb for which and implementation should be resolved.
                IF <c>verb</c> is <c>null</c> the default Command (first registered command) is returned.
            </param>
        </member>
        <member name="M:MSPro.CLArgs.Commander.ExecuteCommand(MSPro.CLArgs.CommandLineArguments)">
            <summary>
                Execute the command referenced by <see cref="P:MSPro.CLArgs.CommandLineArguments.VerbPath" />.
            </summary>
        </member>
        <member name="M:MSPro.CLArgs.Commander.ExecuteCommand(System.String[],MSPro.CLArgs.Settings)">
            <summary>
                Shortcut and preferred way to use Commander.
            </summary>
            <example>
                Full code:
                <code>
                new Commander(settings).ExecuteCommand(CommandLineParser.Parse(args))
                </code>
            </example>
        </member>
        <member name="T:MSPro.CLArgs.CommandBase`1">
            <summary>
                Provides a convenient way to use command-line for most applications.
            </summary>
            <typeparam name="TContext">
                The type of the parameter object that is passed to the command.
            </typeparam>
        </member>
        <member name="P:MSPro.CLArgs.CommandBase`1.Settings">
            <summary>
                The settings instance as provided by Console.Main().
            </summary>
        </member>
        <member name="P:MSPro.CLArgs.CommandBase`1.ExecutionContext">
            <summary>
                Get the execution context as it is provided to the Execute method.
            </summary>
        </member>
        <member name="M:MSPro.CLArgs.CommandBase`1.Execute(MSPro.CLArgs.CommandLineArguments,MSPro.CLArgs.Settings)">
            <summary>
                Execute the command.
            </summary>
            <param name="commandLineArguments"></param>
            <param name="settings"></param>
        </member>
        <member name="M:MSPro.CLArgs.CommandBase`1.BeforeArgumentConversion(MSPro.CLArgs.CommandLineArguments)">
            <summary>
            </summary>
            <remarks>
                This method is called before any Argument conversion takes place.
                Override this method to add your custom Argument to Property
                <see cref="T:MSPro.CLArgs.ValueConverters">TypeConverters</see>.<br />
            </remarks>
        </member>
        <member name="M:MSPro.CLArgs.CommandBase`1.BeforeExecute(`0,System.Collections.Generic.HashSet{System.String},MSPro.CLArgs.ErrorDetailList)">
            <summary>
                Make sure everything is set-up and ready to execute the command.
            </summary>
            <remarks>
                Use this method to validate <see paramref="parameters" />,
                to provide provide dynamic defaults and/or to resolve parameter.<br />
                The method s called immediately before the Command <see cref="M:MSPro.CLArgs.CommandBase`1.Execute(`0)" /> method is called.
                In case, <paramref name="errors" /> contains any value, <see cref="M:MSPro.CLArgs.CommandBase`1.OnError(MSPro.CLArgs.ErrorDetailList,System.Boolean)" /> is called instead of
                <see cref="M:MSPro.CLArgs.CommandBase`1.Execute(`0)" />.
            </remarks>
            <param name="parameters">
                The parameter object (target instance) that will be used to execute the Command.
            </param>
            <param name="unresolvedPropertyNames">
                A <see cref="T:System.Collections.Generic.HashSet`1" /> containing the names of those properties in the CommandContext
                which haven't got a value, neither by assigning a command-line option
                nor by a default value defined in the <c>CommandContext</c>.
                Such properties will have their C# defaults, like <c>false</c> for boolean properties.<br/>
                If you want to check for unresolved properties is is best practice to use <c>nameof()</c>
                instead of plain string: <code>if (unresolvedPropertyNames.Contains(nameof(CommandContext.CSV))) ...</code>
            </param>
            <param name="errors">
                The error object. In case of any error, use <see cref="M:MSPro.CLArgs.ErrorDetailList.AddError(System.String,System.String)" />
                to add your errors to this list.
            </param>
            <seealso cref="M:MSPro.CLArgs.CommandBase`1.OnError(MSPro.CLArgs.ErrorDetailList,System.Boolean)" />
        </member>
        <member name="M:MSPro.CLArgs.CommandBase`1.OnError(MSPro.CLArgs.ErrorDetailList,System.Boolean)">
            <summary>
                Error handler in case of any error.
                <remarks>
                    The default implementation of <see cref="M:MSPro.CLArgs.CommandBase`1.OnError(MSPro.CLArgs.ErrorDetailList,System.Boolean)" /> simply throws an
                    <see cref="T:System.AggregateException" /> in case of any error. You can avoid this by overriding this method.
                </remarks>
            </summary>
            <param name="errors">The errors that have occurred.</param>
            <param name="handled">If <c>true</c> the method does nothing anymore, because it expects the errors have been handled.</param>
            <exception cref="T:System.AggregateException">Always</exception>
        </member>
        <member name="M:MSPro.CLArgs.ErrorDetailList.ToString">
            <summary>
                Easy way to get one complete message for all errors
            </summary>
            <returns></returns>
        </member>
        <member name="P:MSPro.CLArgs.Helper.BinDir">
            <summary>
                Get the current process directory.
            </summary>
            <remarks>
                Uses <see cref="M:System.Diagnostics.Process.GetCurrentProcess" /> to get
                the <see cref="P:System.Diagnostics.Process.MainModule" />'s directory.
            </remarks>
        </member>
        <member name="M:MSPro.CLArgs.Helper.GetExecutableFileName">
            <summary>
                Get the name of the current executable.
            </summary>
            <remarks>
                To support self-contained Assemblies, the method uses <see cref="M:System.Environment.GetCommandLineArgs" /> to
                get the name of the executable.<br />
                <b>Be careful:</b> The exe of a .net portable Assembly cannot be loaded using <see cref="M:System.Reflection.Assembly.LoadFile(System.String)"/>.
                If you use ILSpy you will see 'PEFileNotSupportedException: PE file does not contain any managed metadata.'.<br/>
                Interesting to see, <see cref="M:System.Reflection.Assembly.GetEntryAssembly"/> returns an ExeFileName.DLL as the entry Assembly.
                This DLL can be used 
                The same is true for a single executable, which cannot be loaded
                <br />
                Compilation shows this warning: <see cref="P:System.Reflection.Assembly.Location"/> always returns an empty
                string for assemblies embedded in a single-file app. If the path to the app directory is needed,
                consider calling <see cref="P:System.AppContext.BaseDirectory"/>".
            </remarks>
            <seealso href="https://docs.microsoft.com/de-de/dotnet/core/deploying/single-file" />
        </member>
        <member name="M:MSPro.CLArgs.Helper.FindFile(System.String,System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
                Resolves the path of an existing file.
            </summary>
            <remarks>
                Tries to find and existing file by probing certain directories.<br />.
            </remarks>
            <param name="fileName">The name of the file that should be found.</param>
            <param name="workDir">The current working directory, which is normally <see cref="P:System.Environment.CurrentDirectory" />.</param>
            <param name="binDir">The directory of the executable, which is normally, <see cref="P:MSPro.CLArgs.Helper.BinDir" />.</param>
            <param name="addDirs">An optional list of additional directories where to look for the file.</param>
            <param name="throwIfNotFound">
                Set to <c>true</c> [Default] when you want a <see cref="T:System.IO.FileNotFoundException" />
                to be thrown when the file is not found. Set to <c>false</c> when you want to have
                <c>null</c> as the return value instead.
            </param>
            <returns>
                The file's full path, if the file could be found.<br />
                Otherwise, <c>null</c> if the file wasn't found and if
                <paramref name="throwIfNotFound" /> is set to <c>false</c>.
            </returns>
        </member>
        <member name="M:MSPro.CLArgs.Helper.Wrap(System.String,System.Int32)">
            <summary>
                Wrap a given text (insert meaningful line breaks) as a specified column.
            </summary>
            <param name="text"></param>
            <param name="atColumn"></param>
            <returns></returns>
        </member>
        <member name="M:MSPro.CLArgs.Helper.insertLineBreaks(System.String,System.Int32)">
            <summary>
                Wraps long line by using sb.AppendLine for each new line.
            </summary>
        </member>
        <member name="M:MSPro.CLArgs.IConfigFileResolver.ResolvePath(System.String)">
            <summary>
            Resolve a relative configuration file name to a full path.
            </summary>
            <remarks>
            Resolution looks in the preferred directory first. If the file exists there, the
            full path is returned. Otherwise the full path is build based on the entry Assembly's path.<br/>
            You can use %AppData% and other environment variables.</remarks>
        </member>
        <member name="T:MSPro.CLArgs.Option">
            <summary>
                A command-line Option.
            </summary>
        </member>
        <member name="M:MSPro.CLArgs.Option.#ctor(System.String,System.String)">
            <summary>
                Create a new options.
            </summary>
            <param name="tag">The name of the option.</param>
            <param name="value"></param>
        </member>
        <member name="M:MSPro.CLArgs.Option.#ctor(System.String)">
            <summary>
                Create an unresolved Option.
            </summary>
            <remarks>
                Unresolved means no value has been set.
            </remarks>
        </member>
        <member name="P:MSPro.CLArgs.Option.Key">
            <summary>
                Get the option's Key - which is the tag as it was provided in the command-line,
                or the option's name, after option resolution.
            </summary>
        </member>
        <member name="T:MSPro.CLArgs.OptionResolver">
            <summary>
                Provides support for Option Descriptors.
            </summary>
            <remarks>
                An option as it is parsed from command-line is of type <see cref="T:MSPro.CLArgs.Option" />.<br />
            </remarks>
        </member>
        <member name="F:MSPro.CLArgs.OptionResolver._wellKnownOptions">
            <summary>
                Options with any of these Tags will not be marked as unresolved.
            </summary>
        </member>
        <member name="M:MSPro.CLArgs.OptionResolver.ResolveOptions(MSPro.CLArgs.CommandLineArguments,MSPro.CLArgs.ErrorDetailList,System.Boolean,System.Boolean)">
            <summary>
                Resolve all options from command-line by tag into options by name.
            </summary>
            <remarks>
                All <see cref="P:MSPro.CLArgs.CommandLineArguments.Options" /> are resolved into an
                OptionByName list, based on the provided list of <see cref="T:MSPro.CLArgs.OptionDescriptorAttribute" />s.
            </remarks>
            <param name="commandLineArguments"></param>
            <param name="errors"></param>
            <param name="ignoreCase">If <c>true</c> cases will be ignored when parsing tags.</param>
            <param name="ignoreUnknownTags">
                If <c>true</c> unknown tags provided in the command-line will be ignored.<br />
                If set to <c>false</c> options provided in the command-line where there is no matching OptionDescriptor
                will be recognized as 'too much' (not known). If there is any, <paramref name="errors" /> will contain
                the corresponding messages.
            </param>
            <returns>A unique (by name) list of Options.</returns>
        </member>
        <member name="T:MSPro.CLArgs.CommandLineArguments">
            <summary>
                All arguments as they were provided in the command-line.
            </summary>
            <remarks>
                An <c>Argument</c> is either a <see cref="P:MSPro.CLArgs.CommandLineArguments.Verbs" />
                or an <see cref="T:MSPro.CLArgs.Option" />.
            </remarks>
        </member>
        <member name="P:MSPro.CLArgs.CommandLineArguments.CommandLine">
            <summary>
                The full command-line as it was parsed.
            </summary>
        </member>
        <member name="P:MSPro.CLArgs.CommandLineArguments.Verbs">
            <summary>
                The list of verbs in the sequence order
                as they were provided in the command-line.
            </summary>
        </member>
        <member name="P:MSPro.CLArgs.CommandLineArguments.Targets">
            <summary>
                The list of Targets in the sequence order
                as they were provided in the command-line.
            </summary>
        </member>
        <member name="P:MSPro.CLArgs.CommandLineArguments.VerbPath">
            <summary>
                All Verbs as a '.' concatenated list - namespaced verbs.
            </summary>
            <returns>
                All <see cref="P:MSPro.CLArgs.CommandLineArguments.Verbs" /> concatenated by '.', for example, 'HelloWorld.Germany'.<br />
                <c>null</c> in case, no verb was provided in the command-line.
            </returns>
        </member>
        <member name="P:MSPro.CLArgs.CommandLineArguments.Options">
            <summary>
                A key-value list of all options provided in the command-line.
            </summary>
            <remarks>
                All option values are <c>strings</c> in the first instance.
                Conversion may happen later.
            </remarks>
        </member>
        <member name="M:MSPro.CLArgs.CommandLineArguments.AddOption(MSPro.CLArgs.Option)">
            <inheritdoc cref="M:MSPro.CLArgs.CommandLineArguments.AddOption(MSPro.CLArgs.Option)" />
        </member>
        <member name="M:MSPro.CLArgs.CommandLineArguments.AddOption(System.String,System.String)">
            <summary>
                Manually add or update an option.
            </summary>
            <remarks>Options are unique by their <see cref="P:MSPro.CLArgs.Option.Key" /></remarks>
        </member>
        <member name="T:MSPro.CLArgs.CommandLineParser">
            <summary>
                Provides the functionality to parse a command-line
            </summary>
            <see cref="T:MSPro.CLArgs.CommandLineParser" />
        </member>
        <member name="M:MSPro.CLArgs.CommandLineParser.Parse(System.String[],MSPro.CLArgs.Settings)">
            <summary>
                Shortcut and preferred way to use CommandLineParser.
            </summary>
            <remarks>
                Same as <code>new CommandLineParser(settings).Run(args);</code>.
            </remarks>
        </member>
        <member name="M:MSPro.CLArgs.CommandLineParser.#ctor(System.Char[],System.Char[])">
            <summary>
                Create a new instance.
            </summary>
            <param name="optionsTags">
                <see cref="P:MSPro.CLArgs.Settings.OptionsTags" />
            </param>
            <param name="optionValueTags">
                <see cref="P:MSPro.CLArgs.Settings.OptionValueTags" />
            </param>
        </member>
        <member name="M:MSPro.CLArgs.CommandLineParser.Parse(System.String,MSPro.CLArgs.CommandLineArguments)">
            <summary>
                Parse a string containing arguments
            </summary>
        </member>
        <member name="P:MSPro.CLArgs.Settings.OptionValueTags">
            <summary>
                Get or set a list of characters that mark the end of an option's name.
            </summary>
        </member>
        <member name="P:MSPro.CLArgs.Settings.IgnoreUnknownOptions">
            <summary>
                Get or set if unknown option tags provided in the command-line should be ignored.
            </summary>
            <remarks>
                If set to <c>true</c> unknown options are ignored.<br />
                Otherwise an error is added to the <see cref="T:MSPro.CLArgs.ErrorDetailList">error collection</see>.
            </remarks>
        </member>
        <member name="P:MSPro.CLArgs.Settings.AutoResolveCommands">
            <summary>
                Automatically resolve commands using <see cref="P:MSPro.CLArgs.Settings.CommandResolver" />
            </summary>
        </member>
        <member name="P:MSPro.CLArgs.Settings.CommandResolver">
            <summary>
                Get or set an object to resolve all known commands (and verbs).
            </summary>
            <remarks>
                The default resolver is
                <see cref="T:MSPro.CLArgs.AssemblyCommandResolver" />(<b>Assembly.GetEntryAssembly()</b>),
                to find all classes with [Command] annotation in the <c>EntryAssembly</c>.
            </remarks>
        </member>
        <member name="P:MSPro.CLArgs.Settings.OptionsTags">
            <summary>
                Get or set tags which identify an option.
            </summary>
            <remarks>
                A command-line argument that starts with any of these character
                is considered to be an <c>Option</c>.
            </remarks>
        </member>
        <member name="P:MSPro.CLArgs.Settings.HelpFullWidth">
            <summary>
            The width that is used to print a help text before a line break is inserted.
            </summary>
        </member>
        <member name="P:MSPro.CLArgs.Settings.HelpAlignColumn">
            <summary>
            First column where help text starts.
            </summary>
        </member>
        <member name="P:MSPro.CLArgs.Settings.DisplayAllCommandsDescription">
            <summary>
                Display a help text for all commands.
            </summary>
            <remarks>
                This method is called when you application is called without any parameter
                to display the help text for all commands. You may provide your own method
                to override the default implementation;
            </remarks>
        </member>
        <member name="P:MSPro.CLArgs.Settings.DisplayCommandHelp">
            <summary>
                Display a formatted help text for a single Command.
            </summary>
            <remarks>
                This method is called when a VERB was specified and help for this particular verb should be printed.<br />
                The <see cref="T:MSPro.CLArgs.CommandDescriptor">Command's descriptor</see> is passed to the method (the Command is specified by
                the Verb).
            </remarks>
        </member>
        <member name="T:MSPro.CLArgs.ValueConverters.FromStringDelegate">
            <summary>
                Convert from <c>string</c> int a
                <paramref name="targetType" />
                .
            </summary>
            <param name="optionValue">The option value of type <c>string</c></param>
            <param name="optionName">
                The name of the property on which the converter value will be set.
            </param>
            <param name="errors">
                The error collection where to add conversion errors.
            </param>
            <param name="targetType">The into which <paramref name="optionValue" /> should be converted.</param>
            <returns>
                The converted value of type
                <param ref="targetType"></param>
            </returns>
            <example>
                <code>
             if (!DateTime.TryParse(optionValue, out DateTime d)) {
                 errors.AddError(optionName,
                     $"Cannot parse the value '{optionValue}' for Option '{optionName}' into a DateTime.");
             }
             return d;
            </code>
            </example>
        </member>
    </members>
</doc>
